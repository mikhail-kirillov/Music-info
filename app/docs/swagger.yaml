definitions:
  models.AddSongRequest:
    properties:
      group:
        example: The Beatles
        type: string
      song:
        example: Hey Jude
        type: string
    required:
    - group
    - song
    type: object
  models.DeleteSongResponse:
    properties:
      message:
        example: Song deleted
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: Invalid request
        type: string
    type: object
  models.GetSongLyricsResponse:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      totalVerses:
        example: 50
        type: integer
      verses:
        items:
          type: string
        type: array
    type: object
  models.GetSongsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.SongResponse'
        type: array
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      totalItems:
        example: 50
        type: integer
      totalPages:
        example: 5
        type: integer
    type: object
  models.SongResponse:
    properties:
      group:
        example: The Beatles
        type: string
      id:
        example: 1
        type: integer
      link:
        example: https://example.com/heyjude
        type: string
      release_date:
        example: "1968-08-26"
        type: string
      song:
        example: Hey Jude
        type: string
      text:
        example: Hey Jude, don't make it bad...
        type: string
    type: object
  models.UpdateSongRequest:
    properties:
      group:
        example: The Beatles
        type: string
      link:
        example: https://example.com/heyjude
        type: string
      release_date:
        example: "1968-08-26"
        type: string
      song:
        example: Hey Jude
        type: string
      text:
        example: Hey Jude, don't make it bad...
        type: string
    type: object
info:
  contact:
    email: kirillov.mikhail.job@icloud.com
    name: Kirillov Mikhail
    url: https://mikhail-kirillov.github.io/
  description: Online music library
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Music info
  version: 0.0.1
paths:
  /songs:
    get:
      description: Returns a list of songs with filtering and pagination
      parameters:
      - description: Group name
        in: query
        name: group
        type: string
      - description: Song Title
        in: query
        name: song
        type: string
      - description: Release date
        in: query
        name: release_date
        type: string
      - description: Song lyrics
        in: query
        name: text
        type: string
      - description: Link to the song
        in: query
        name: link
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of elements per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetSongsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get song list
      tags:
      - songs
    post:
      consumes:
      - application/json
      description: Adds a song based on the provided band and song title information
      parameters:
      - description: New song details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.AddSongRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SongResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Add song
      tags:
      - songs
  /songs/{id}:
    delete:
      description: Removes a song from the database by its ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteSongResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete song
      tags:
      - songs
    put:
      consumes:
      - application/json
      description: Updates the title, band, release date, lyrics or link to the song
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated song data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSongRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SongResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update song
      tags:
      - songs
  /songs/{id}/lyrics:
    get:
      description: Returns the lyrics line by line with pagination
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Verse number
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit number
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetSongLyricsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get song lyrics
      tags:
      - songs
swagger: "2.0"
